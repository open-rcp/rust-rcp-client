name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true

# Add permissions block for GITHUB_TOKEN
permissions:
  contents: write
  discussions: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create_release:
    name: Create Release
    # Only run when a tag is pushed or on manual workflow dispatch
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          # Extract version from tag name
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        echo "Using version: $(cat $GITHUB_OUTPUT | grep version | cut -d= -f2)"
    
    - name: Validate version format
      run: |
        VERSION=$(cat $GITHUB_OUTPUT | grep version | cut -d= -f2)
        if ! [[ $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Version must be in format v1.2.3 or v1.2.3-alpha"
          exit 1
        fi
    
    - name: Generate release notes
      id: release_notes
      run: |
        # Get previous tag for comparison
        prev_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$prev_tag" ]; then
          prev_tag=$(git rev-list --max-parents=0 HEAD)  # First commit
          echo "No previous tag, using first commit as reference: $prev_tag"
        fi
        
        # Create a release notes file with sections for features, fixes, etc.
        echo "## Changes in ${{ steps.get_version.outputs.version }}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        
        # Features
        echo "### Features" >> RELEASE_NOTES.md
        git log $prev_tag..HEAD --pretty=format:"- %s" --grep="^feat" | grep -v "^$" | sort >> RELEASE_NOTES.md || echo "- No new features in this release" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        
        # Bug fixes
        echo "### Bug Fixes" >> RELEASE_NOTES.md
        git log $prev_tag..HEAD --pretty=format:"- %s" --grep="^fix" | grep -v "^$" | sort >> RELEASE_NOTES.md || echo "- No bug fixes in this release" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        
        # Improvements
        echo "### Improvements" >> RELEASE_NOTES.md
        git log $prev_tag..HEAD --pretty=format:"- %s" --grep="^improve\|^refactor\|^perf" | grep -v "^$" | sort >> RELEASE_NOTES.md || echo "- No improvements in this release" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        
        # Documentation changes
        echo "### Documentation" >> RELEASE_NOTES.md
        git log $prev_tag..HEAD --pretty=format:"- %s" --grep="^docs" | grep -v "^$" | sort >> RELEASE_NOTES.md || echo "- No documentation changes in this release" >> RELEASE_NOTES.md
        
        cat RELEASE_NOTES.md
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        name: Rust RCP Client ${{ steps.get_version.outputs.version }}
        tag_name: ${{ steps.get_version.outputs.version }}
        body_path: RELEASE_NOTES.md
        draft: true
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  build:
    name: Build for ${{ matrix.platform }}
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            deps_cmd: >
              sudo apt-get update && 
              sudo apt-get install -y libglib2.0-dev libgtk-3-dev libwebkit2gtk-4.1-dev pkg-config
            archive_ext: tar.gz
          - platform: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
            deps_cmd: choco install pkgconfiglite
            archive_ext: zip
          - platform: macos
            os: macos-latest
            target: x86_64-apple-darwin
            deps_cmd: brew install pkg-config
            archive_ext: tar.gz
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # First try to restore cached build from CI workflow to speed up builds
    - name: Check for cached build
      id: cached-build
      uses: actions/cache@v3
      with:
        path: target
        key: rust-rcp-client-${{ matrix.platform }}-${{ github.sha }}
        restore-keys: |
          rust-rcp-client-${{ matrix.platform }}-
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        shared-key: "rust-rcp-client-${{ matrix.platform }}-release"
    
    - name: Install dependencies for platform
      if: matrix.deps_cmd != ''
      run: ${{ matrix.deps_cmd }}
      shell: bash
    
    # Build if no cache hit or if we need to rebuild for release
    - name: Build Release Binary
      run: cargo build --release --target ${{ matrix.target }}
    
    # Package preparation
    - name: Create Package Directory
      run: mkdir -p rust-rcp-client-pkg
      shell: bash
    
    - name: Copy Binary (Windows)
      if: matrix.platform == 'windows'
      run: |
        cp target/${{ matrix.target }}/release/rust_rcp_client.exe rust-rcp-client-pkg/rust_rcp_client.exe
        # Copy any additional files like configs, READMEs, etc.
        cp README.md rust-rcp-client-pkg/README.md
      shell: bash
    
    - name: Copy Binary (Linux/macOS)
      if: matrix.platform != 'windows'
      run: |
        cp target/${{ matrix.target }}/release/rust_rcp_client rust-rcp-client-pkg/rust_rcp_client
        chmod +x rust-rcp-client-pkg/rust_rcp_client
        # Copy any additional files like configs, READMEs, etc.
        cp README.md rust-rcp-client-pkg/README.md
      shell: bash
    
    - name: Package (Windows)
      if: matrix.platform == 'windows'
      run: Compress-Archive -Path rust-rcp-client-pkg/* -DestinationPath rust-rcp-client-windows.zip
      shell: pwsh
    
    - name: Package (Linux/macOS)
      if: matrix.platform != 'windows'
      run: tar -czf rust-rcp-client-${{ matrix.platform }}.${{ matrix.archive_ext }} -C rust-rcp-client-pkg .
      shell: bash
    
    # Upload assets
    - name: Upload Release Assets
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.create_release.outputs.version }}
        files: |
          rust-rcp-client-${{ matrix.platform }}.${{ matrix.archive_ext || 'zip' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish Release
    needs: [create_release, build]
    runs-on: ubuntu-latest
    if: ${{ !failure() && !cancelled() }}
    steps:
    - name: Update Release Status
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.create_release.outputs.version }}
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
